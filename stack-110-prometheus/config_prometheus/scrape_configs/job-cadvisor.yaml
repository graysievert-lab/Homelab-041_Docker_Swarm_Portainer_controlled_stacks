scrape_configs: 
  - job_name: "cadvisor"
    dockerswarm_sd_configs: 
      - host: tcp://tasks.socket-proxy:2375
        role: tasks                           # Docker Swarm tasks discovery
        port: 8080 # The port to scrape metrics from, when discovered tasks don't have published ports.| default = 80        
    relabel_configs:
    # NOTE: There is no control over "target_label: __address__" !!!!
    # The tasks role discovers all Swarm tasks and exposes their ports as targets.       
    # For each published port of a task, a single target is generated. 
    # If a task has no published ports, a target per task is created using the port parameter defined in the SD configuration.
    # Available meta labels: NOTE "__meta_dockerswarm_network_*" labels are not populated for ports which are published with mode=host.
      # __meta_dockerswarm_container_label_<labelname>:   each label of the container, with any unsupported characters converted to an underscore
      # __meta_dockerswarm_task_id:                       the id of the task
      # __meta_dockerswarm_task_container_id:             the container id of the task
      # __meta_dockerswarm_task_desired_state:            the desired state of the task
      # __meta_dockerswarm_task_slot:                     the slot of the task
      # __meta_dockerswarm_task_state:                    the state of the task
      # __meta_dockerswarm_task_port_publish_mode:        the publish mode of the task port
      # __meta_dockerswarm_service_id:                    the id of the service
      # __meta_dockerswarm_service_name:                  the name of the service
      # __meta_dockerswarm_service_mode:                  the mode of the service
      # __meta_dockerswarm_service_label_<labelname>:     each label of the service, with any unsupported characters converted to an underscore
      # __meta_dockerswarm_network_id:                    the ID of the network
      # __meta_dockerswarm_network_name:                  the name of the network
      # __meta_dockerswarm_network_ingress:               whether the network is ingress
      # __meta_dockerswarm_network_internal:              whether the network is internal
      # __meta_dockerswarm_network_label_<labelname>:     each label of the network, with any unsupported characters converted to an underscore
      # __meta_dockerswarm_network_label:                 each label of the network, with any unsupported characters converted to an underscore
      # __meta_dockerswarm_network_scope:                 the scope of the network
      # __meta_dockerswarm_node_id:                       the ID of the node
      # __meta_dockerswarm_node_hostname:                 the hostname of the node
      # __meta_dockerswarm_node_address:                  the address of the node
      # __meta_dockerswarm_node_availability:             the availability of the node
      # __meta_dockerswarm_node_label_<labelname>:        each label of the node, with any unsupported characters converted to an underscore
      # __meta_dockerswarm_node_platform_architecture:    the architecture of the node
      # __meta_dockerswarm_node_platform_os:              the operating system of the node
      # __meta_dockerswarm_node_role:                     the role of the node
      # __meta_dockerswarm_node_status:                   the status of the node

      - source_labels: [__meta_dockerswarm_task_desired_state]  # Only keep containers that should be running.
        regex: running
        action: keep
      
      - source_labels: [__meta_dockerswarm_service_name]  # Only keep services that have a `*_cadvisor` name.
        regex: .+_cadvisor$
        action: keep

      - source_labels: [__meta_dockerswarm_node_hostname] # Use node's hostname as instance 
        target_label: instance
        action: replace
